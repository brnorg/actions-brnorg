name: teste frontend com robot framework

on:
  workflow_dispatch:


jobs:
  testes-com-robot:
    runs-on: [ubuntu-latest]
    permissions: write-all
    strategy:
      matrix: 
        browser: [chromium, firefox, webkit]
      fail-fast: false

    steps:
      - name: faz o checkcout
        uses: actions/checkout@v4

      - name: Inicializa ambiente nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm install playwright --save-dev
      - run: npm ci

      - name: Inicializa ambiente python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 
          cache: 'pip'
      - run: pip install robotframework-metrics==3.3.3
      - run: pip install -r requirements.txt

      - name: Configurar cache do rfbrowser
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/Browser/wrapper
          key: rfbrowser-${{ runner.os }}
          restore-keys: |
            rfbrowser-${{ runner.os }}

      - name: Verificar cache do rfbrowser
        id: cache-rfbrowser-check
        run: |
          directory="/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/Browser/wrapper"
          
          # Obter o tamanho do diretório em kilobytes
          size=$(du -sk "$directory" | cut -f1)
          
          # Verificar se o tamanho é maior que 1024 KB (1 MB)
          if [ "$size" -gt 1024 ]; then
            echo "cache-found=true" >> "$GITHUB_OUTPUT"
          else
            echo "cache-found=false" >> "$GITHUB_OUTPUT"
          fi


      - name: verifica instala dependencias rfbrowser se necessario
        run: |
          if [ "${{ steps.cache-rfbrowser-check.outputs.cache-found }}" != 'true' ]; then
            rfbrowser init
          fi

      - name: executando testes robot
        run: |
          robot -d ./reports-${{ matrix.browser }} -v HEADLESS:true \
          -v BROWSER:${{ matrix.browser }} tests
          
          
      - name: preparando arquivo de summary
        run: |

          cd ./reports-${{ matrix.browser }}
        
          nome_arquivo="git_summary.py"

          # Cria o código Python a ser escrito no arquivo
          cat << EOF > "$nome_arquivo"
          from robot.api import ExecutionResult, ResultVisitor
          import sys
          
          class MyResultVisitor(ResultVisitor):
              def __init__(self, markdown_file='report.md'):
                  self.failed_tests = []
                  self.passed_tests = []
                  self.markdown_file = markdown_file
          
              def visit_test(self, test):
                  if test.status == 'FAIL':
                      self.failed_tests.append(test.name)
                  elif test.status == 'PASS':
                      self.passed_tests.append(test.name)
          
              def end_result(self, result):
                  # Create a new markdown file
                  with open(self.markdown_file, "w") as f:
                      f.write("# Robot Framework Report\n")
                      f.write("|Test|Status|\n")
                      f.write("|---|---|\n")
                      for test in self.passed_tests:
                          f.write(f"|{test}|PASS|\n")
                      for test in self.failed_tests:
                          f.write(f"|{test}|FAIL|\n")
                          
          if __name__ == '__main__':
              try:
                  output_file = sys.argv[1]
              except IndexError:
                  output_file = "output.xml"
              try:
                  markdown_file = sys.argv[2]
              except IndexError:
                  markdown_file = "report.md"
              result = ExecutionResult(output_file)
              result.visit(MyResultVisitor())
          EOF
          
          # Exibe uma mensagem indicando que o arquivo foi criado
          echo "O arquivo '$nome_arquivo' foi criado com sucesso!"

      - run: ls

      - name: gerando arquivo de summary e metricas de dashboard
        run: |
          cd ./reports-${{ matrix.browser }}
          python git_summary.py
          cat report.md >> $GITHUB_STEP_SUMMARY
          robotmetrics
      
      - name: disponibilizando status dos testes
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports testes no navegador ${{ matrix.browser }}
          path: ./reports-${{ matrix.browser }}
          if-no-files-found: ignore
          retention-days: 1
          overwrite: true

        

        
