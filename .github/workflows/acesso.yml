name: acesso

on:
  push:
    branches: main  
  workflow_dispatch:
  


jobs:
  acesso:
    runs-on: [self-hosted, Linux]
    concurrency: 
      group: grupo-testes
      cancel-in-progress: true
    # container: ubuntu 
    steps:
     
      # - name: fazendo checkout
      #   uses: actions/checkout@v4

      # - name: usando apache
      #   uses: docker://httpd
      #   with:
      #     container-name: meu

      - name: fazendo novo container
        run: |
          apt-install echo -y
          REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $2}')
          docker run -d --name $REPO_NAME-$GITHUB_RUN_NUMBER nginx
          
      # - name: verificando conteudo
      #   run: |
      #     REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $2}')
      #     curl http://$REPO_NAME-$GITHUB_RUN_NUMBER

      - name: container de verificacao
        uses: docker://ubuntu
        with:
          entrypoint: bash
          args: |
            REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $2}')
            curl http://$REPO_NAME-$GITHUB_RUN_NUMBER
        

      - name: parando container
        run: |
          bash -c
          REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $2}')
          docker stop $REPO_NAME-$GITHUB_RUN_NUMBER

      - name: limpando container
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $2}')
          docker container rm -f $REPO_NAME-$GITHUB_RUN_NUMBER
      
      # - name: configurando python
      #   uses: actions/setup-python@v5.0.0
      #   with:
      #     python-version: '3.10' 
        
      # - name: subindo servidor
      #   run: python -m http.server 4200 &
        
      # - name: Esperar o servidor estar pronto
      #   run: |
      #     for i in {1..10}; do
      #       if curl -sSf "http://localhost:4200" >/dev/null; then
      #         echo "Servidor est√° pronto!"
      #         break
      #       fi
      #       echo "Aguardando o servidor estar pronto..."
      #       sleep 10
      #     done
